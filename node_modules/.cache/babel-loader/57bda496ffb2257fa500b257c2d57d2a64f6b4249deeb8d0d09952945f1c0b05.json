{"ast":null,"code":"/*\r\n    1. 该文件用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数，它从store接收参数，进行加工后，给store返回一个新的函数\r\n    2. reducer函数会接收两个参数，分别为之前的状态(preState)和动作对象(action)\r\n*/\nexport default function countReducer(preState, action) {\n  console.log(preState, action);\n  if (preState === undefined) preState = 0;\n  // 从action对象中获取type和data\n  const {\n    type,\n    data\n  } = action;\n  // 根据type决定如何加工数据\n  switch (type) {\n    // 如果是加\n    case 'increment':\n      return preState + data;\n    // 如果是减\n    case 'decrement':\n      return preState - data;\n    default:\n      return preState;\n  }\n}","map":{"version":3,"names":["countReducer","preState","action","console","log","undefined","type","data"],"sources":["C:/Users/田园/Desktop/redux_test/src/redux/count_reducers.js"],"sourcesContent":["/*\r\n    1. 该文件用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数，它从store接收参数，进行加工后，给store返回一个新的函数\r\n    2. reducer函数会接收两个参数，分别为之前的状态(preState)和动作对象(action)\r\n*/\r\nexport default function countReducer(preState,action) {\r\n    console.log(preState,action);\r\n    if(preState===undefined) preState=0\r\n    // 从action对象中获取type和data\r\n    const {type,data}=action\r\n    // 根据type决定如何加工数据\r\n    switch (type) {\r\n        // 如果是加\r\n        case 'increment':\r\n            return preState + data\r\n        // 如果是减\r\n        case 'decrement':\r\n            return preState - data\r\n        default:\r\n            return preState\r\n    }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,YAAYA,CAACC,QAAQ,EAACC,MAAM,EAAE;EAClDC,OAAO,CAACC,GAAG,CAACH,QAAQ,EAACC,MAAM,CAAC;EAC5B,IAAGD,QAAQ,KAAGI,SAAS,EAAEJ,QAAQ,GAAC,CAAC;EACnC;EACA,MAAM;IAACK,IAAI;IAACC;EAAI,CAAC,GAACL,MAAM;EACxB;EACA,QAAQI,IAAI;IACR;IACA,KAAK,WAAW;MACZ,OAAOL,QAAQ,GAAGM,IAAI;IAC1B;IACA,KAAK,WAAW;MACZ,OAAON,QAAQ,GAAGM,IAAI;IAC1B;MACI,OAAON,QAAQ;EAAA;AAE3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}