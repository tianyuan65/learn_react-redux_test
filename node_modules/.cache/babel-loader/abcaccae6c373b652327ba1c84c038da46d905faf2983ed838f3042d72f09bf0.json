{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u7530\\u56ED\\\\Desktop\\\\redux_test\\\\src\\\\containers\\\\Count\\\\index.jsx\";\n/*\r\n    容器组件，它不能我亲自动手写，需要借助react-redux，先下载react-redux库\r\n*/\n\nimport React, { Component } from 'react';\n// 引入action\nimport { createIncrementAction, createDecrementAction, createIncrementAsyncAction } from '../../redux/actions/count';\n\n// 引入connect用于连接UI组件与redux，connect是一个函数；connect函数调用的返回值依然是一个函数\nimport { connect } from 'react-redux';\n\n// 定义UI组件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Count extends Component {\n  constructor() {\n    super(...arguments);\n    // 初始化状态里标识求和的值，属性名为count，其值为0\n    this.state = {\n      bagName: 'Hermes'\n    };\n    // 加法\n    this.increment = () => {\n      //获取用户选择的数字 \n      const {\n        value\n      } = this.selectNumber;\n      this.props.jia(value * 1);\n    };\n    // 减法\n    this.decrement = () => {\n      const {\n        value\n      } = this.selectNumber;\n      this.props.jian(value * 1);\n    };\n    // 当前求和为奇数时加\n    this.incrementIfOdd = () => {\n      const {\n        value\n      } = this.selectNumber;\n      if (this.props.count % 2 !== 0) {\n        this.props.jia(value * 1);\n      }\n    };\n    // 异步加\n    this.incrementIfAsync = () => {\n      const {\n        value\n      } = this.selectNumber;\n      this.props.jiaAsync(value * 1, 500);\n    };\n  }\n  render() {\n    // console.log('UI组件接收到的props是',this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u6211\\u662FCount\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", this.props.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        ref: c => this.selectNumber = c,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"1\",\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2\",\n          children: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"3\",\n          children: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.decrement,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.incrementIfOdd,\n        children: \"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\u5947\\u6570\\u518D\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.incrementIfAsync,\n        children: \"\\u5F02\\u6B65\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// 使用connect()()，创建并暴露一个Count容器组件，connect函数再一次调用时，就可以接到容器组件(CountContainer)，传入Count的UI组件作为参数，就会把UI组件和容器组件联系起来(这是固定写法)\n// connect在第一次调用时需要传入两个参数，且这两个参数必须都是函数，作用就是传递状态\nexport default connect(\n// 这个state就是redux帮我保存的状态\nstate => ({\n  count: state\n}),\n// mapDispatchToProps的简写，只需要给在UI组件中调用的函数传递对应的action对象(同步的话返回的是对象；异步的话返回的就是函数)，react-redux中自动帮我调dispatch方法\n{\n  jia: createIncrementAction,\n  jian: createDecrementAction,\n  jiaAsync: createIncrementAsyncAction\n})(Count);","map":{"version":3,"names":["React","Component","createIncrementAction","createDecrementAction","createIncrementAsyncAction","connect","jsxDEV","_jsxDEV","Count","constructor","arguments","state","bagName","increment","value","selectNumber","props","jia","decrement","jian","incrementIfOdd","count","incrementIfAsync","jiaAsync","render","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","c","onClick"],"sources":["C:/Users/田园/Desktop/redux_test/src/containers/Count/index.jsx"],"sourcesContent":["/*\r\n    容器组件，它不能我亲自动手写，需要借助react-redux，先下载react-redux库\r\n*/\r\n\r\nimport React, { Component } from 'react'\r\n// 引入action\r\nimport {createIncrementAction,createDecrementAction,createIncrementAsyncAction} from '../../redux/actions/count'\r\n\r\n// 引入connect用于连接UI组件与redux，connect是一个函数；connect函数调用的返回值依然是一个函数\r\nimport {connect} from 'react-redux'\r\n\r\n// 定义UI组件\r\nclass Count extends Component {\r\n    // 初始化状态里标识求和的值，属性名为count，其值为0\r\n    state={bagName:'Hermes'}\r\n    \r\n    // 加法\r\n    increment=()=>{\r\n        //获取用户选择的数字 \r\n        const {value}=this.selectNumber\r\n        this.props.jia(value*1)\r\n    }\r\n    // 减法\r\n    decrement=()=>{\r\n      const {value}=this.selectNumber\r\n      this.props.jian(value*1)\r\n    }\r\n    // 当前求和为奇数时加\r\n    incrementIfOdd=()=>{\r\n        const {value}=this.selectNumber\r\n        if (this.props.count %2 !== 0) {\r\n          this.props.jia(value*1)\r\n        }\r\n    }\r\n    // 异步加\r\n    incrementIfAsync=()=>{\r\n        const {value}=this.selectNumber\r\n        this.props.jiaAsync(value*1,500)\r\n    }\r\n\r\n  render() {\r\n    // console.log('UI组件接收到的props是',this.props);\r\n    return (\r\n      <div>\r\n        {/* 读取状态 */}\r\n        <h2>我是Count组件</h2>\r\n        <h4>当前求和为：{this.props.count}</h4>\r\n        <select ref={c=>this.selectNumber=c}>\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n            <option value=\"3\">3</option>\r\n        </select>&nbsp;\r\n        <button onClick={this.increment}>+</button>&nbsp;\r\n        <button onClick={this.decrement}>-</button>&nbsp;\r\n        <button onClick={this.incrementIfOdd}>当前求和为奇数再加</button>&nbsp;\r\n        <button onClick={this.incrementIfAsync}>异步加</button>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 使用connect()()，创建并暴露一个Count容器组件，connect函数再一次调用时，就可以接到容器组件(CountContainer)，传入Count的UI组件作为参数，就会把UI组件和容器组件联系起来(这是固定写法)\r\n// connect在第一次调用时需要传入两个参数，且这两个参数必须都是函数，作用就是传递状态\r\nexport default connect(\r\n    // 这个state就是redux帮我保存的状态\r\n    state=> ({count:state}),\r\n\r\n    // mapDispatchToProps的简写，只需要给在UI组件中调用的函数传递对应的action对象(同步的话返回的是对象；异步的话返回的就是函数)，react-redux中自动帮我调dispatch方法\r\n    {\r\n        jia:createIncrementAction,\r\n        jian:createDecrementAction,\r\n        jiaAsync:createIncrementAsyncAction\r\n    }\r\n)(Count)\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}